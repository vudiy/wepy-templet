'use strict';

Component({
    properties: {
        target: Number,
        showDay: Boolean,
        callback: String,
        format: Array,
        clearTimer: Boolean
    },
    externalClasses: ['countdown-class'],
    data: {
        time: '',
        resultFormat: [],
        changeFormat: false
    },
    ready: function ready() {
        this.getFormat();
    },

    methods: {
        getFormat: function getFormat() {
            var data = this.data;
            var len = data.format.length;

            if (!data.showDay) data.resultFormat.push('');

            if (len >= 3) {
                for (var i = 0; i < len; i++) {
                    if (data.resultFormat.length >= 4) break;
                    if (data.format[i]) {
                        data.resultFormat.push(data.format[i].toString());
                    }
                }

                if (data.resultFormat.length >= 4) data.changeFormat = true;
            }

            this.getLastTime();
        },
        init: function init() {
            var self = this;
            setTimeout(function () {
                self.getLastTime.call(self);
            }, 1000);
        },
        getLastTime: function getLastTime() {
            var data = this.data;
            var gapTime = Math.ceil((data.target - new Date().getTime()) / 1000);
            var result = '';
            var time = '00:00:00';
            var day = '00';
            var format = data.resultFormat;

            if (gapTime > 0) {
                day = this.formatNum(parseInt(gapTime / 86400));
                var lastTime = gapTime % 86400;
                var hour = this.formatNum(parseInt(lastTime / 3600));
                lastTime = lastTime % 3600;
                var minute = this.formatNum(parseInt(lastTime / 60));
                var second = this.formatNum(lastTime % 60);

                if (data.changeFormat) time = '' + hour + format[1] + minute + format[2] + second + format[3];else time = hour + ':' + minute + ':' + second;

                if (!data.clearTimer) this.init.call(this);
            } else {
                this.endfn();
            }

            if (data.showDay) {
                if (data.changeFormat) {
                    result = '' + day + format[0] + ' ' + time;
                } else {
                    result = day + 'd ' + time;
                }
            } else {
                result = time;
            }
            this.setData({
                time: result
            });
        },
        formatNum: function formatNum(num) {
            return num > 9 ? num : '0' + num;
        },
        endfn: function endfn() {
            this.triggerEvent('callback', {});
        }
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbIkNvbXBvbmVudCIsInByb3BlcnRpZXMiLCJ0YXJnZXQiLCJOdW1iZXIiLCJzaG93RGF5IiwiQm9vbGVhbiIsImNhbGxiYWNrIiwiU3RyaW5nIiwiZm9ybWF0IiwiQXJyYXkiLCJjbGVhclRpbWVyIiwiZXh0ZXJuYWxDbGFzc2VzIiwiZGF0YSIsInRpbWUiLCJyZXN1bHRGb3JtYXQiLCJjaGFuZ2VGb3JtYXQiLCJyZWFkeSIsImdldEZvcm1hdCIsIm1ldGhvZHMiLCJsZW4iLCJsZW5ndGgiLCJwdXNoIiwiaSIsInRvU3RyaW5nIiwiZ2V0TGFzdFRpbWUiLCJpbml0Iiwic2VsZiIsInNldFRpbWVvdXQiLCJjYWxsIiwiZ2FwVGltZSIsIk1hdGgiLCJjZWlsIiwiRGF0ZSIsImdldFRpbWUiLCJyZXN1bHQiLCJkYXkiLCJmb3JtYXROdW0iLCJwYXJzZUludCIsImxhc3RUaW1lIiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsImVuZGZuIiwic2V0RGF0YSIsIm51bSIsInRyaWdnZXJFdmVudCJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsVUFBVTtBQUNOQyxnQkFBWTtBQUNSQyxnQkFBUUMsTUFEQTtBQUVSQyxpQkFBU0MsT0FGRDtBQUdSQyxrQkFBVUMsTUFIRjtBQUlSQyxnQkFBUUMsS0FKQTtBQUtSQyxvQkFBWUw7QUFMSixLQUROO0FBUU5NLHFCQUFpQixDQUFDLGlCQUFELENBUlg7QUFTTkMsVUFBTTtBQUNGQyxjQUFNLEVBREo7QUFFRkMsc0JBQWMsRUFGWjtBQUdGQyxzQkFBYztBQUhaLEtBVEE7QUFjTkMsU0FkTSxtQkFjRTtBQUNKLGFBQUtDLFNBQUw7QUFFSCxLQWpCSzs7QUFrQk5DLGFBQVM7QUFDTEQsaUJBREssdUJBQ087QUFDUixnQkFBTUwsT0FBTyxLQUFLQSxJQUFsQjtBQUNBLGdCQUFNTyxNQUFNUCxLQUFLSixNQUFMLENBQVlZLE1BQXhCOztBQUVBLGdCQUFJLENBQUNSLEtBQUtSLE9BQVYsRUFBbUJRLEtB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RUssbUJBbUVHO0FBQ0osaUJBQUtHLFlBQUwsQ0FBa0IsVUFBbEIsRUFBOEIsRUFBOUI7QUFDSDtBQXJFSTtBQWxCSCxDQUFWIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiQ29tcG9uZW50KHtcclxuICAgIHByb3BlcnRpZXM6IHtcclxuICAgICAgICB0YXJnZXQ6IE51bWJlcixcclxuICAgICAgICBzaG93RGF5OiBCb29sZWFuLFxyXG4gICAgICAgIGNhbGxiYWNrOiBTdHJpbmcsXHJcbiAgICAgICAgZm9ybWF0OiBBcnJheSxcclxuICAgICAgICBjbGVhclRpbWVyOiBCb29sZWFuXHJcbiAgICB9LFxyXG4gICAgZXh0ZXJuYWxDbGFzc2VzOiBbJ2NvdW50ZG93bi1jbGFzcyddLFxyXG4gICAgZGF0YToge1xyXG4gICAgICAgIHRpbWU6ICcnLFxyXG4gICAgICAgIHJlc3VsdEZvcm1hdDogW10sXHJcbiAgICAgICAgY2hhbmdlRm9ybWF0OiBmYWxzZVxyXG4gICAgfSxcclxuICAgIHJlYWR5KCkge1xyXG4gICAgICAgIHRoaXMuZ2V0Rm9ybWF0KCk7XHJcblxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgICBnZXRGb3JtYXQoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGRhdGEuZm9ybWF0Lmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgIGlmICghZGF0YS5zaG93RGF5KSBkYXRhLnJlc3VsdEZvcm1hdC5wdXNoKCcnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChsZW4gPj0gMykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdEZvcm1hdC5sZW5ndGggPj0gNCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZm9ybWF0W2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEucmVzdWx0Rm9ybWF0LnB1c2goZGF0YS5mb3JtYXRbaV0udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlc3VsdEZvcm1hdC5sZW5ndGggPj0gNCkgZGF0YS5jaGFuZ2VGb3JtYXQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmdldExhc3RUaW1lKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZWxmLmdldExhc3RUaW1lLmNhbGwoc2VsZik7XHJcbiAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0TGFzdFRpbWUoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IGdhcFRpbWUgPSBNYXRoLmNlaWwoKGRhdGEudGFyZ2V0IC0gbmV3IERhdGUoKS5nZXRUaW1lKCkpIC8gMTAwMCk7XHJcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICAgICAgbGV0IHRpbWUgPSAnMDA6MDA6MDAnO1xyXG4gICAgICAgICAgICBsZXQgZGF5ID0gJzAwJztcclxuICAgICAgICAgICAgY29uc3QgZm9ybWF0ID0gZGF0YS5yZXN1bHRGb3JtYXQ7XHJcblxyXG4gICAgICAgICAgICBpZiAoZ2FwVGltZSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGRheSA9IHRoaXMuZm9ybWF0TnVtKHBhcnNlSW50KGdhcFRpbWUgLyA4NjQwMCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RUaW1lID0gZ2FwVGltZSAlIDg2NDAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaG91ciA9IHRoaXMuZm9ybWF0TnVtKHBhcnNlSW50KGxhc3RUaW1lIC8gMzYwMCkpO1xyXG4gICAgICAgICAgICAgICAgbGFzdFRpbWUgPSBsYXN0VGltZSAlIDM2MDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW51dGUgPSB0aGlzLmZvcm1hdE51bShwYXJzZUludChsYXN0VGltZSAvIDYwKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWNvbmQgPSB0aGlzLmZvcm1hdE51bShsYXN0VGltZSAlIDYwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5jaGFuZ2VGb3JtYXQpIHRpbWUgPSBgJHtob3VyfSR7Zm9ybWF0WzFdfSR7bWludXRlfSR7Zm9ybWF0WzJdfSR7c2Vjb25kfSR7Zm9ybWF0WzNdfWA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRpbWUgPSBgJHtob3VyfToke21pbnV0ZX06JHtzZWNvbmR9YDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGEuY2xlYXJUaW1lcikgdGhpcy5pbml0LmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVuZGZuKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLnNob3dEYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmNoYW5nZUZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGAke2RheX0ke2Zvcm1hdFswXX0gJHt0aW1lfWA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGAke2RheX1kICR7dGltZX1gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gdGltZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNldERhdGEoe1xyXG4gICAgICAgICAgICAgICAgdGltZTogcmVzdWx0XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9LFxyXG4gICAgICAgIGZvcm1hdE51bShudW0pIHtcclxuICAgICAgICAgICAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiBgMCR7bnVtfWA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmRmbigpIHtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQoJ2NhbGxiYWNrJywge30pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSk7XHJcbiJdfQ==